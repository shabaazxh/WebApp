@using Microsoft.AspNetCore.Components.Authorization;
@using WebApp.Shared;
@using Microsoft.AspNetCore.Authorization;

@page "/tickets/edit/{id:guid}"

@attribute [Authorize]
@inject HttpClient Http;
@inject NavigationManager Navigation;

<h3> Edit Project </h3>


@if (ticketItem == null)
{
    <span> Getting the ticket item to edit</span>
}
else
{
    <EditForm Model="@AssignUser" OnValidSubmit="@ChangeUser">

        <div class="form-group">
            <label class="col-form-label"> Current user: @ticketItem.AssignedUser.UserName </label>
            <InputText placeholder="Username" id="inlineFormInputGroup" type="email" @bind-Value="@AssignUser.UserName" class="form-control" />

            <button type="submit" class="btn btn-success">Change user</button>
        </div>
    </EditForm>

    @if (userNotFoundError == true)
    {
        <div class="alert alert-danger" role="alert">
            User could not be found
        </div>
    }

    @if (userChangeSuccess == true)
    {
        <div class="alert alert-success" role="alert">
            User has been successfully changed.
        </div>
    }
    <EditForm Model="@ticketItem" OnValidSubmit="@SubmitChanges">

        <DataAnnotationsValidator />

        <div class="form-group">
            <label class="col-form-label"> Name</label>
            <InputText id="title" @bind-Value="ticketItem.Title" class="form-control" />
            <ValidationMessage For="@(() => ticketItem.Title)" />
            <div class="form-check">
                @if (ticketItem.isDone == true)
                {
                    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="ticketItem.isDone" checked>
                }
                else
                {
                    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="ticketItem.isDone">
                }

                <label class="form-check-label" for="flexCheckDefault">
                    Done @ticketItem.isDone
                </label>
            </div>
        </div>


        <button type="submit" class="btn btn-primary">

            <i class="fas fa-save"></i>Save Changes
        </button>
        <ValidationSummary />
    </EditForm>

}


@code {

    [Parameter] public Guid Id { get; set; }
    private Ticket ticketItem { get; set; } = new Ticket();
    private ApplicationUser AssignUser { get; set; } = new ApplicationUser();

    private bool userNotFoundError = false;
    private bool userChangeSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ticketItem.AssignedUser = new ApplicationUser();
            ticketItem = await Http.GetFromJsonAsync<Ticket>($"Tickets/{Id}");
        }
        catch (Exception e)
        {

        }
    }
    // Change the user assigned on the ticket
    private async Task ChangeUser()
    {

        try
        {
            var response = await Http.PutAsJsonAsync($"Tickets/changeuser/{AssignUser.UserName}/{ticketItem.Id}", AssignUser);

            if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                if(userChangeSuccess == true)
                {
                    userChangeSuccess = false;
                }
                userNotFoundError = true;
            }

            if (response.IsSuccessStatusCode)
            {
                if (userNotFoundError == true)
                {
                    userNotFoundError = false;
                }
                userChangeSuccess = true;
            }

        }
        catch (Exception)
        {

        }
    }

    private async Task SubmitChanges()
    {
        try
        {
            var response = await Http.PutAsJsonAsync<Ticket>($"Tickets/{ticketItem.Id}", ticketItem);
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/tickets");
        }
        catch (Exception e)
        {

        }
    }
}