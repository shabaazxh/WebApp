@using Microsoft.AspNetCore.Components.Authorization;
@using WebApp.Shared;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Authorization;

@page "/tickets/create"

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider ASP

<h3> Project create </h3>

<EditForm Model="ticketItem" OnValidSubmit="CreateNewTicket">

    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="col-form-label"> Ticket Title </label>
        <InputText id="title" @bind-Value="ticketItem.Title" class="form-control" />
        <label class="col-form-label"> Assign user </label>
        <InputText id="title" placeholder="User@email.com" @bind-Value="ticketItem.AssignedUser.UserName" class="form-control" />

        <label class="mr-sm-2" for="inlineFormCustomSelect">Ticket type</label>
        <InputSelect @bind-Value="ticketItem.ticketType" class="custom-select mr-sm-2" id="inlineFormCustomSelect">
            @foreach (var value in Enum.GetValues(typeof(TicketType)))
            {
                <option>@value</option>
            }
        </InputSelect>

        <div class="form-group">
            <label class="col-form-label"> Assign a project </label>
            <InputText placeholder="Project name" id="inlineFormInputGroup" @bind-Value="@ticketItem.AssociatedProject.ProjectName" class="form-control" />

            <ValidationMessage For="@(() => ticketItem.Title)" />
        </div>

        @if (ProjectNotFound == true)
        {
            <div class="alert alert-danger" role="alert">
                Project could not be found
            </div>
        }

        @if (userNotFound == true)
        {
            <div class="alert alert-danger" role="alert">
                User could not be found, please enter a valid user.
            </div>
        }

        <button type="submit" class="btn btn-primary">

            <i class="fas fa-save"></i>Create
        </button>
    </div>
    <ValidationSummary />
</EditForm>



@code {

    private Ticket ticketItem { get; set; } = new Ticket();
    private Project assignProject { get; set; } = new Project();

    private bool ProjectNotFound = false;

    private bool userNotFound = false;

    protected override async Task OnInitializedAsync()
    {
        ticketItem.AssociatedProject = new Project();
        ticketItem.AssignedUser = new ApplicationUser();
    }

    // Create a new ticket
    private async Task CreateNewTicket()
    {
        // Get current user information
        var user = (await ASP.GetAuthenticationStateAsync()).User;
        var UserStringId = user.FindFirst(c => c.Type == "sub")?.Value;

        try
        {
            var response = await Http.PostAsJsonAsync($"Tickets/{UserStringId}", ticketItem);
            var content = await response.Content.ReadAsStringAsync();
            var ticket = JsonConvert.DeserializeObject<Ticket>(content);

            // if the ticket is successfully created
            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Navigation.NavigateTo($"/tickets");

            }

            // if the user is not found
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                userNotFound = true;
            }

            // if the project is not found
            if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                ProjectNotFound = true;
            }

        } catch (Exception e)
        {

        }
    }
}