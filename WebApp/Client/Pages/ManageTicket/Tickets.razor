@using WebApp.Shared;
@using Microsoft.AspNetCore.Authorization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@inject AuthenticationStateProvider ASP

@page "/tickets"

@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager Navigation


<h3> Tickets (@all_tickets.Count())</h3>

@if (all_tickets.Count() == 0)
{
    <p> There are currently no tickets </p>
}

<ul class="list-group">
    <a href="tickets/create"> Create Ticket</a>
    @if (all_tickets != null)
    {
        @foreach (var ticket in all_tickets)
        {
<li class="list-group-item">
    <p> Title: @ticket.Title </p>
    <p> Type: @ticket.ticketType</p>
    @if (ticket.AssignedUser.UserName != null)
    {
        <p> Assigned user: @ticket.AssignedUser.UserName</p>
    }
    else
    {
        <p> Assigned user: User is deleted</p>
    }
    <a href="tickets/edit/@ticket.Id"> Edit</a>
    <a href="tickets/delete/@ticket.Id"> Delete</a>
</li>
        }
    }
    else
    {
        <p> The value is null</p>
    }
</ul>

@code {
    private List<Ticket> all_tickets = new List<Ticket>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await ASP.GetAuthenticationStateAsync()).User;
        var UserStringId = user.FindFirst(c => c.Type == "sub")?.Value;

        try
        {
            all_tickets = await http.GetFromJsonAsync<List<Ticket>>($"Tickets/{UserStringId}/UserTickets");

            foreach (var x in all_tickets)
            {
                x.AssignedUser = await http.GetFromJsonAsync<ApplicationUser>($"User/{x.Id}/UserForTicket");
            }

        }
        catch (Exception e)
        {

        }

    }
}