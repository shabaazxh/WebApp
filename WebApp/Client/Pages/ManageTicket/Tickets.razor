@using WebApp.Shared;
@using Microsoft.AspNetCore.Authorization;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@inject AuthenticationStateProvider ASP

@page "/tickets"

@attribute [AllowAnonymous]
@inject HttpClient http
@inject NavigationManager Navigation


<h3> Assigned Tickets (@all_tickets.Where( t => t.isDone == false).Count())</h3>

<AuthorizeView>
    <Authorized>
        @if (all_tickets.Count() == 0)
        {
            <p> There are currently no tickets </p>
        }

        <ul class="list-group">
            <a href="tickets/create"> Create Ticket</a>
            @if (all_tickets != null)
            {
                @foreach (var ticket in all_tickets)
                {
                    if (ticket.isDone == false)
                    {
                        <li class="list-group-item">
                            <p> Title: @ticket.Title </p>
                            <p> Type: @ticket.ticketType</p>
                            @if (ticket.AssignedUser.UserName != null)
                            {
                                <p> Assigned user: @ticket.AssignedUser.UserName</p>
                            }
                            else
                            {
                                <p> Assigned user: User is deleted</p>
                            }

                            @if (ticket.CreatedBy != null)
                            {
                                <p> Created by: @ticket.CreatedBy.UserName</p>
                            }
                            else
                            {
                                <p> Assigned user: User is deleted</p>
                            }

                            @if(ticket.AssociatedProject != null)
                            {
                                <p>Project: @ticket.AssociatedProject.ProjectName</p>
                            } else
                            {
                                <p> could not find project.</p>
                            }


                            <a href="tickets/edit/@ticket.Id"> Edit</a>
                            <a href="tickets/delete/@ticket.Id"> Delete</a>
                        </li>
                    }
                }
            }
            else
            {
                <p> The value is null</p>
            }
        </ul>


        <hr />

        <h3> Completed </h3>


        @if (all_tickets.Count() == 0)
        {
            <p> There are currently no tickets </p>
        }

        <ul class="list-group">
            @if (all_tickets != null)
            {
                @foreach (var ticket in all_tickets)
                {
                    if (ticket.isDone == true)
                    {
                        <div class="alert alert-success" role="alert">
                            <strong>Ticket:</strong> @ticket.Title, <strong>Type:</strong> @ticket.ticketType, <strong>Status:</strong> Completed, <strong>Assigned to: </strong> @if (ticket.AssignedUser.UserName != null)
                            {@ticket.AssignedUser.UserName} , <strong>Created by: </strong>  @if (ticket.CreatedBy != null)
                            {@ticket.CreatedBy.UserName}

                            <a href="tickets/edit/@ticket.Id"> Edit</a>
                            <a href="tickets/delete/@ticket.Id"> Delete</a>
                        </div>
                    }
                }
            }
            else
            {
                <p> The value is null</p>
            }
        </ul>

        <hr />

        <h3> Created by You </h3>

        @if (createdByCurrentUser.Count() == 0)
        {
            <p> There are currently no tickets </p>
        }

        <ul class="list-group">
            @if (createdByCurrentUser != null)
            {
                @foreach (var ticket in createdByCurrentUser)
                {
                    <li class="list-group-item">
                        <p> Title: @ticket.Title </p>
                        <p> Type: @ticket.ticketType</p>
                        @if (ticket.AssignedUser.UserName != null)
                        {
                            <p> Assigned user: @ticket.AssignedUser.UserName</p>
                        }
                        else
                        {
                            <p> Assigned user: User is deleted</p>
                        }

                        @if (ticket.CreatedBy != null)
                        {
                            <p> Created by: @ticket.CreatedBy.UserName</p>
                        }
                        else
                        {
                            <p> Assigned user: User not found</p>
                        }

                        <a href="tickets/edit/@ticket.Id"> Edit</a>
                        <a href="tickets/delete/@ticket.Id"> Delete</a>
                    </li>
                }
            }
            else
            {
                <p> The value is null</p>
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        <p> Please Sign up to see tickets.</p>
    </NotAuthorized>
</AuthorizeView>




@code {
    private List<Ticket> all_tickets = new List<Ticket>();
    private List<Ticket> createdByCurrentUser = new List<Ticket>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await ASP.GetAuthenticationStateAsync()).User;
        var UserStringId = user.FindFirst(c => c.Type == "sub")?.Value;

        // Get all tickets assigned to currently logged in user
        try
        {
            all_tickets = await http.GetFromJsonAsync<List<Ticket>>($"Tickets/{UserStringId}/UserTickets");

        }
        catch (Exception e)
        {

        }

        // Get all tickets created by currently logged in user
        try
        {
            createdByCurrentUser = await http.GetFromJsonAsync<List<Ticket>>($"Tickets/{UserStringId}/User/CreatedTickets");

        }
        catch (Exception)
        {

        }

    }
}