@using WebApp.Shared;
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;

@inject AuthenticationStateProvider ASP

@page "/prediction"

@attribute [AllowAnonymous]
@inject HttpClient http
@inject NavigationManager Navigation


<h3> Prediction page </h3>

<EditForm Model="selectedDate" OnValidSubmit="InitPrediction">

    <div class="form-group">
        <label for="formGroupExampleInput" class="form-label">Select a date for prediction</label>
        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">Default</span>
            <input type="date" class="form-control" id="floatingInputValue" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind-value="selectedDate">
        </div>
        <button type="submit" class="btn btn-primary">Start Prediction</button>
    </div>

    @if (predictedInfo.Count != 0 && !predictedInfo.ContainsKey("not_enough_data"))
    {
        <h1>Prediction: </h1>
        <p> Projects per company count: @predictedInfo["projects"] </p>
        <p> Users per project count: @predictedInfo["users"] </p>
    }
    else
    {
        <p>Enter a date and press the button to begin a prediction</p>
    }

    @if (isDataEnough == false)
    {
        <div class="alert alert-danger" role="alert">
            There is not enough data to make a prediction yet.
        </div>
    }

    @if (predictionComplete == true)
    {
        <div class="alert alert-success" role="alert">
            Prediction Complete!
        </div>
    }


</EditForm>

    @code {
        [CascadingParameter]
        private DateTime selectedDate { get; set; }
        private int ProjectsPerCompany { get; set; }
        private int usersPerProject { get; set; }
        private bool triggerMes = true;

        private bool isDataEnough = true;
        private bool predictionComplete = false;

        private Dictionary<string, int> predictedInfo = new Dictionary<string, int>();

        private async Task InitPrediction()
        {
            predictedInfo = await http.GetFromJsonAsync<Dictionary<string, int>>($"Prediction/{selectedDate.ToString("dd - MM - yyyy")}");

            // if the prediction did not find enough data for the prediction
            if (predictedInfo.ContainsKey("not_enough_data"))
            {
                Navigation.NavigateTo("/prediction");
                isDataEnough = false;

            } else
            {
                if(isDataEnough == false)
                {
                    isDataEnough = true;
                }

                predictionComplete = true;
                Navigation.NavigateTo("/prediction");
            }
        }
    }
